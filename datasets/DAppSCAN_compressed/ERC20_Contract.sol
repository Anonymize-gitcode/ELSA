pragma solidity ^0.4.21;

contract Owned { address public owner; event TransferOwnership(address oldaddr, address newaddr); modifier onlyOwner() { if (msg.sender != owner) return; _; }

function Owned() public { owner = msg.sender; }

function transferOwnership(address _new) onlyOwner public { address oldaddr = owner; owner = _new; emit TransferOwnership(oldaddr, owner); } } contract ERC20Interface { uint256 public totalSupply; function balanceOf(address _owner) public constant returns (uint256 balance); function transfer(address _to, uint256 _value) public returns (bool success); function transferFrom(address _from, address _to, uint256 _value) public returns (bool success); function approve(address _spender, uint256 _value) public returns (bool success); function allowance(address _owner, address _spender) public constant returns (uint256 remaining); event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); } contract TMC_Contract is ERC20Interface, Owned { string public constant symbol = "TMC"; string public constant name = "TMC Token"; uint8 public constant decimals = 18; uint256 public constant totalSupply = 500000000000000000000000000; bool public stopped; mapping (address => int8) public blackList; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; event Blacklisted(address indexed target); event DeleteFromBlacklist(address indexed target); event RejectedPaymentToBlacklistedAddr(address indexed from, address indexed to, uint256 value); event RejectedPaymentFromBlacklistedAddr(address indexed from, address indexed to, uint256 value); modifier notStopped { require(!stopped); _; } function TMC_Contract() public { balances[msg.sender] = totalSupply; }