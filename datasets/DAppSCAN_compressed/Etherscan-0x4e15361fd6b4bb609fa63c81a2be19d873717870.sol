pragma solidity ^0.4.23;

function sub(uint256 a, uint256 b) internal pure returns (uint256) { require(b <= a); return a - b; } } contract Owned { address public owner; address public newOwner; mapping(address => bool) public isAdmin; event OwnershipTransferProposed(address indexed _from, address indexed _to); event OwnershipTransferred(address indexed _from, address indexed _to); event AdminChange(address indexed _admin, bool _status); modifier onlyOwner { require(msg.sender == owner); _; } function transferOwnership(address _newOwner) public onlyOwner { require(_newOwner != address(0x0)); emit OwnershipTransferProposed(owner, _newOwner); newOwner = _newOwner; } function acceptOwnership() public { require(msg.sender == newOwner); emit OwnershipTransferred(owner, newOwner); owner = newOwner; }

function addAdmin(address _a) public onlyOwner { require(isAdmin[_a] == false); isAdmin[_a] = true; emit AdminChange(_a, true); } function removeAdmin(address _a) public onlyOwner { require(isAdmin[_a] == true); isAdmin[_a] = false; emit AdminChange(_a, false); } } contract Wallet is Owned { address public wallet; event WalletUpdated(address newWallet); constructor() public { wallet = owner; }

interface ERC20Interface { function totalSupply() public view returns (uint); function balanceOf(address tokenOwner) public view returns (uint balance); function allowance(address tokenOwner, address spender) public view returns (uint remaining); function transfer(address to, uint tokens) public returns (bool success); function approve(address spender, uint tokens) public returns (bool success); function transferFrom(address from, address to, uint tokens) public returns (bool success); event Transfer(address indexed from, address indexed to, uint tokens); event Approval(address indexed tokenOwner, address indexed spender, uint tokens); }

contract ERC20Token is ERC20Interface, Owned { using SafeMath for uint; uint public tokensIssuedTotal; mapping(address => uint) balances; mapping(address => mapping (address => uint)) allowed; function totalSupply() public view returns (uint) { return tokensIssuedTotal; }

contract FantomIcoDates is Owned { uint public dateMainStart = 1529053200; uint public dateMainEnd = 1529658000; uint public constant DATE_LIMIT = 1529658000 + 180 days; event IcoDateUpdated(uint id, uint unixts); modifier checkDateOrder { _; require ( dateMainStart < dateMainEnd ) ; require ( dateMainEnd < DATE_LIMIT ) ; }